.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Summarizer 3"
.TH Text::Summarizer 3 "2018-01-21" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Summarizer \- Summarize Bodies of Text
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Text::Summarizer;
\&        
\&        my $summarizer = Text::Summarizer\->new( articles_path => "articles/*" );
\&        
\&        my $summary   = $summarizer\->summarize_file("articles/article00.txt");
\&                #or if you want to process in bulk
\&        my @summaries = $summarizer\->summarize_all("articles/*");
\&        
\&        $summarizer\->pretty_print($summary);
\&        $summarizer\->pretty_print($_) for (@summaries);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to summarize bodies of text into a scored hash of \fIsentences\fR, \fIphrase-fragments\fR, and \fIindividual words\fR from the provided text.
These scores reflect the weight (or precedence) of the relative text-fragments, i.e. how well they summarize or reflect the overall nature of the text.
All of the sentences and phrase-fragments are drawn from within the existing text, and are \s-1NOT\s0 proceedurally generated.
.PP
\&\f(CW\*(C`$summarizer\-\*(C'\fRsummarize_text> and \f(CW\*(C`$summarizer\-\*(C'\fRsummarize_file> each return a hash-ref containing three array-refs (\f(CW\*(C`$summarizer\-\*(C'\fRsummarize_all> returns a list of these hash-refs):
=over 2
=item *
\&\fBsentences\fR => a list of full sentences from the given article, with composite scores of the words contained therein
.IP "\(bu" 4
\&\fBfragments\fR => a list of phrase fragments from the given article, scored as above
.IP "\(bu" 4
\&\fB    words\fR => a list of all words in the article, scored by a three-factor system consisting of \fIfrequency of appearance\fR, \fIpopulation standard deviation of word clustering\fR, and \fIuse in important phrase fragments\fR.
.Sp
The \f(CW\*(C`$summarizer\-\*(C'\fRpretty_print> method prints a visually pleasing graph of the above three summary categories.
.Sp
The \f(CW\*(C`$summarizer\-\*(C'\fRpretty_print> method prints a visually pleasing graph of the above three summary categories.
=back
.Sp
## About Fragments
Phrase fragments are in actuallity short \*(L"scraps\*(R" of text (usually only two or three words) that are derived from the text via the following process:
=over 8
=item 1
the entirety of the text is tokenized and scored into a \f(CW\*(C`frequency\*(C'\fR table, with a high-pass threshold of frequencies above \f(CW\*(C`# of tokens * user\-defined scaling factor\*(C'\fR
=item 2
each sentence is tokenized and stored in an array
=item 3
for each word within the \f(CW\*(C`frequency\*(C'\fR table, a table of phrase-fragments is derived by finding each occurance of said word and tracking forward and backward by a user-defined \*(L"radius\*(R" of tokens (defaults to \f(CW\*(C`radius = 5\*(C'\fR, does not include the central key-word) X each phrase-fragment is thus compiled of (by default) an 11\-token string
=item 4
all fragments for a given key-word are then compared to each other, and each word is deleted if it appears only once amongst all of the fragments
(leaving only \f(CW\*(C`\f(CIA\f(CW X \f(CIB\f(CW X ... X \f(CIS\f(CW\*(C'\fR where \fIA\fR, \fIB\fR,...,\fIS\fR are the phrase-fragments)
=item 5
what remains of each fragment is a list of \*(L"scraps\*(R" X strings of consecutive tokens X from which the longest scrap is chosen as a representation of the given phrase-fragment
=item 6
when a shorter fragment-scrap is included in the text of a longer scrap (i.e. a different phrase-fragment), the shorter is deleted and its score is added to the score of the longer
=item 7
when multiple fragments are equivalent (i.e. they consist of the same list of tokens when stopwords are excluded), they are condensed into a single scrap in the form of \f(CW"(some|word|tokens)"\fR such that the fragment now represents the tokens of the scrap (excluding stopwords) regardless of order
=back
.SH "AUTHOR"
.IX Header "AUTHOR"
Faelin Landy (CPAN:FaeTheWolf) <faelin.landy@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2018 by Faelin Landy
.PP
This program is free software: you can redistribute it and/or modify it under the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the \s-1GNU\s0 Lesser General Public License for more details.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 656:" 4
.IX Item "Around line 656:"
\&'=item' outside of any '=over'
.IP "Around line 687:" 4
.IX Item "Around line 687:"
You forgot a '=back' before '=head1'
